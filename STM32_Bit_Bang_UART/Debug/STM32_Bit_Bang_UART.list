
STM32_Bit_Bang_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08001400  08001400  00011400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003ac  2000000c  0800153c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003b8  0800153c  000203b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011251  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000246f  00000000  00000000  00031286  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a48  00000000  00000000  000336f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  00038140  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000940  00000000  00000000  00038888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004359  00000000  00000000  000391c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e7f  00000000  00000000  0003d521  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000013f0  00000000  00000000  0004041c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080013e8 	.word	0x080013e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080013e8 	.word	0x080013e8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f820 	bl	80011f0 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b2:	4616      	mov	r6, r2
 80002b4:	4b65      	ldr	r3, [pc, #404]	; (800044c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002b6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800045c <HAL_GPIO_Init+0x1b0>
 80002ba:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000460 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002be:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002c4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002cc:	45a0      	cmp	r8, r4
 80002ce:	d17f      	bne.n	80003d0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002d0:	684d      	ldr	r5, [r1, #4]
 80002d2:	2d12      	cmp	r5, #18
 80002d4:	f000 80af 	beq.w	8000436 <HAL_GPIO_Init+0x18a>
 80002d8:	f200 8088 	bhi.w	80003ec <HAL_GPIO_Init+0x140>
 80002dc:	2d02      	cmp	r5, #2
 80002de:	f000 80a7 	beq.w	8000430 <HAL_GPIO_Init+0x184>
 80002e2:	d87c      	bhi.n	80003de <HAL_GPIO_Init+0x132>
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	f000 808e 	beq.w	8000406 <HAL_GPIO_Init+0x15a>
 80002ea:	2d01      	cmp	r5, #1
 80002ec:	f000 809e 	beq.w	800042c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f4:	2cff      	cmp	r4, #255	; 0xff
 80002f6:	bf93      	iteet	ls
 80002f8:	4682      	movls	sl, r0
 80002fa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002fe:	3d08      	subhi	r5, #8
 8000300:	f8d0 b000 	ldrls.w	fp, [r0]
 8000304:	bf92      	itee	ls
 8000306:	00b5      	lslls	r5, r6, #2
 8000308:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800030c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800030e:	fa09 f805 	lsl.w	r8, r9, r5
 8000312:	ea2b 0808 	bic.w	r8, fp, r8
 8000316:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031a:	bf88      	it	hi
 800031c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	ea48 0505 	orr.w	r5, r8, r5
 8000324:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000328:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800032c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000330:	d04e      	beq.n	80003d0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4d47      	ldr	r5, [pc, #284]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000334:	4f46      	ldr	r7, [pc, #280]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000336:	69ad      	ldr	r5, [r5, #24]
 8000338:	f026 0803 	bic.w	r8, r6, #3
 800033c:	f045 0501 	orr.w	r5, r5, #1
 8000340:	61bd      	str	r5, [r7, #24]
 8000342:	69bd      	ldr	r5, [r7, #24]
 8000344:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000348:	f005 0501 	and.w	r5, r5, #1
 800034c:	9501      	str	r5, [sp, #4]
 800034e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000352:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000358:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800035c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000360:	fa09 f90b 	lsl.w	r9, r9, fp
 8000364:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000368:	4d3a      	ldr	r5, [pc, #232]	; (8000454 <HAL_GPIO_Init+0x1a8>)
 800036a:	42a8      	cmp	r0, r5
 800036c:	d068      	beq.n	8000440 <HAL_GPIO_Init+0x194>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	d066      	beq.n	8000444 <HAL_GPIO_Init+0x198>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	d064      	beq.n	8000448 <HAL_GPIO_Init+0x19c>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	bf0c      	ite	eq
 8000386:	2503      	moveq	r5, #3
 8000388:	2504      	movne	r5, #4
 800038a:	fa05 f50b 	lsl.w	r5, r5, fp
 800038e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000392:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000396:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000398:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800039c:	bf14      	ite	ne
 800039e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003a0:	43a5      	biceq	r5, r4
 80003a2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003a4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003a6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003aa:	bf14      	ite	ne
 80003ac:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ae:	43a5      	biceq	r5, r4
 80003b0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b8:	bf14      	ite	ne
 80003ba:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003bc:	43a5      	biceq	r5, r4
 80003be:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c6:	bf14      	ite	ne
 80003c8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ca:	ea25 0404 	biceq.w	r4, r5, r4
 80003ce:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003d0:	3601      	adds	r6, #1
 80003d2:	2e10      	cmp	r6, #16
 80003d4:	f47f af73 	bne.w	80002be <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003d8:	b003      	add	sp, #12
 80003da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003de:	2d03      	cmp	r5, #3
 80003e0:	d022      	beq.n	8000428 <HAL_GPIO_Init+0x17c>
 80003e2:	2d11      	cmp	r5, #17
 80003e4:	d184      	bne.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003e6:	68ca      	ldr	r2, [r1, #12]
 80003e8:	3204      	adds	r2, #4
          break;
 80003ea:	e781      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003ec:	4f1a      	ldr	r7, [pc, #104]	; (8000458 <HAL_GPIO_Init+0x1ac>)
 80003ee:	42bd      	cmp	r5, r7
 80003f0:	d009      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003f2:	d812      	bhi.n	800041a <HAL_GPIO_Init+0x16e>
 80003f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000464 <HAL_GPIO_Init+0x1b8>
 80003f8:	454d      	cmp	r5, r9
 80003fa:	d004      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003fc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000400:	454d      	cmp	r5, r9
 8000402:	f47f af75 	bne.w	80002f0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000406:	688a      	ldr	r2, [r1, #8]
 8000408:	b1c2      	cbz	r2, 800043c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800040a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800040c:	bf0c      	ite	eq
 800040e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000412:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000416:	2208      	movs	r2, #8
 8000418:	e76a      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041a:	4575      	cmp	r5, lr
 800041c:	d0f3      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 800041e:	4565      	cmp	r5, ip
 8000420:	d0f1      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 8000422:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000468 <HAL_GPIO_Init+0x1bc>
 8000426:	e7eb      	b.n	8000400 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000428:	2200      	movs	r2, #0
 800042a:	e761      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800042c:	68ca      	ldr	r2, [r1, #12]
          break;
 800042e:	e75f      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000430:	68ca      	ldr	r2, [r1, #12]
 8000432:	3208      	adds	r2, #8
          break;
 8000434:	e75c      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000436:	68ca      	ldr	r2, [r1, #12]
 8000438:	320c      	adds	r2, #12
          break;
 800043a:	e759      	b.n	80002f0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800043c:	2204      	movs	r2, #4
 800043e:	e757      	b.n	80002f0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	2500      	movs	r5, #0
 8000442:	e7a2      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000444:	2501      	movs	r5, #1
 8000446:	e7a0      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000448:	2502      	movs	r5, #2
 800044a:	e79e      	b.n	800038a <HAL_GPIO_Init+0xde>
 800044c:	40010400 	.word	0x40010400
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800
 8000458:	10210000 	.word	0x10210000
 800045c:	10310000 	.word	0x10310000
 8000460:	10320000 	.word	0x10320000
 8000464:	10110000 	.word	0x10110000
 8000468:	10220000 	.word	0x10220000

0800046c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800046c:	b10a      	cbz	r2, 8000472 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800046e:	6101      	str	r1, [r0, #16]
 8000470:	4770      	bx	lr
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	e7fb      	b.n	800046e <HAL_GPIO_WritePin+0x2>
	...

08000478 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000478:	6803      	ldr	r3, [r0, #0]
{
 800047a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800047e:	07db      	lsls	r3, r3, #31
{
 8000480:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000482:	d410      	bmi.n	80004a6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000484:	682b      	ldr	r3, [r5, #0]
 8000486:	079f      	lsls	r7, r3, #30
 8000488:	d45e      	bmi.n	8000548 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800048a:	682b      	ldr	r3, [r5, #0]
 800048c:	0719      	lsls	r1, r3, #28
 800048e:	f100 8095 	bmi.w	80005bc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000492:	682b      	ldr	r3, [r5, #0]
 8000494:	075a      	lsls	r2, r3, #29
 8000496:	f100 80bf 	bmi.w	8000618 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800049a:	69ea      	ldr	r2, [r5, #28]
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 812d 	bne.w	80006fc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004a2:	2000      	movs	r0, #0
 80004a4:	e014      	b.n	80004d0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004a6:	4c90      	ldr	r4, [pc, #576]	; (80006e8 <HAL_RCC_OscConfig+0x270>)
 80004a8:	6863      	ldr	r3, [r4, #4]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d007      	beq.n	80004c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004b2:	6863      	ldr	r3, [r4, #4]
 80004b4:	f003 030c 	and.w	r3, r3, #12
 80004b8:	2b08      	cmp	r3, #8
 80004ba:	d10c      	bne.n	80004d6 <HAL_RCC_OscConfig+0x5e>
 80004bc:	6863      	ldr	r3, [r4, #4]
 80004be:	03de      	lsls	r6, r3, #15
 80004c0:	d509      	bpl.n	80004d6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004c2:	6823      	ldr	r3, [r4, #0]
 80004c4:	039c      	lsls	r4, r3, #14
 80004c6:	d5dd      	bpl.n	8000484 <HAL_RCC_OscConfig+0xc>
 80004c8:	686b      	ldr	r3, [r5, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1da      	bne.n	8000484 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
}
 80004d0:	b002      	add	sp, #8
 80004d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004d6:	686b      	ldr	r3, [r5, #4]
 80004d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004dc:	d110      	bne.n	8000500 <HAL_RCC_OscConfig+0x88>
 80004de:	6823      	ldr	r3, [r4, #0]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004e6:	f7ff fe73 	bl	80001d0 <HAL_GetTick>
 80004ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004ec:	6823      	ldr	r3, [r4, #0]
 80004ee:	0398      	lsls	r0, r3, #14
 80004f0:	d4c8      	bmi.n	8000484 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004f2:	f7ff fe6d 	bl	80001d0 <HAL_GetTick>
 80004f6:	1b80      	subs	r0, r0, r6
 80004f8:	2864      	cmp	r0, #100	; 0x64
 80004fa:	d9f7      	bls.n	80004ec <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004fc:	2003      	movs	r0, #3
 80004fe:	e7e7      	b.n	80004d0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000500:	b99b      	cbnz	r3, 800052a <HAL_RCC_OscConfig+0xb2>
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000510:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000512:	f7ff fe5d 	bl	80001d0 <HAL_GetTick>
 8000516:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000518:	6823      	ldr	r3, [r4, #0]
 800051a:	0399      	lsls	r1, r3, #14
 800051c:	d5b2      	bpl.n	8000484 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	1b80      	subs	r0, r0, r6
 8000524:	2864      	cmp	r0, #100	; 0x64
 8000526:	d9f7      	bls.n	8000518 <HAL_RCC_OscConfig+0xa0>
 8000528:	e7e8      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	d103      	bne.n	800053a <HAL_RCC_OscConfig+0xc2>
 8000532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000536:	6023      	str	r3, [r4, #0]
 8000538:	e7d1      	b.n	80004de <HAL_RCC_OscConfig+0x66>
 800053a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053e:	6023      	str	r3, [r4, #0]
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	e7cd      	b.n	80004e4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000548:	4c67      	ldr	r4, [pc, #412]	; (80006e8 <HAL_RCC_OscConfig+0x270>)
 800054a:	6863      	ldr	r3, [r4, #4]
 800054c:	f013 0f0c 	tst.w	r3, #12
 8000550:	d007      	beq.n	8000562 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000552:	6863      	ldr	r3, [r4, #4]
 8000554:	f003 030c 	and.w	r3, r3, #12
 8000558:	2b08      	cmp	r3, #8
 800055a:	d110      	bne.n	800057e <HAL_RCC_OscConfig+0x106>
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	03da      	lsls	r2, r3, #15
 8000560:	d40d      	bmi.n	800057e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	079b      	lsls	r3, r3, #30
 8000566:	d502      	bpl.n	800056e <HAL_RCC_OscConfig+0xf6>
 8000568:	692b      	ldr	r3, [r5, #16]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1af      	bne.n	80004ce <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	696a      	ldr	r2, [r5, #20]
 8000572:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000576:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	e785      	b.n	800048a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800057e:	692a      	ldr	r2, [r5, #16]
 8000580:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <HAL_RCC_OscConfig+0x274>)
 8000582:	b16a      	cbz	r2, 80005a0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000588:	f7ff fe22 	bl	80001d0 <HAL_GetTick>
 800058c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	079f      	lsls	r7, r3, #30
 8000592:	d4ec      	bmi.n	800056e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000594:	f7ff fe1c 	bl	80001d0 <HAL_GetTick>
 8000598:	1b80      	subs	r0, r0, r6
 800059a:	2802      	cmp	r0, #2
 800059c:	d9f7      	bls.n	800058e <HAL_RCC_OscConfig+0x116>
 800059e:	e7ad      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe15 	bl	80001d0 <HAL_GetTick>
 80005a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005a8:	6823      	ldr	r3, [r4, #0]
 80005aa:	0798      	lsls	r0, r3, #30
 80005ac:	f57f af6d 	bpl.w	800048a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b0:	f7ff fe0e 	bl	80001d0 <HAL_GetTick>
 80005b4:	1b80      	subs	r0, r0, r6
 80005b6:	2802      	cmp	r0, #2
 80005b8:	d9f6      	bls.n	80005a8 <HAL_RCC_OscConfig+0x130>
 80005ba:	e79f      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005bc:	69aa      	ldr	r2, [r5, #24]
 80005be:	4c4a      	ldr	r4, [pc, #296]	; (80006e8 <HAL_RCC_OscConfig+0x270>)
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <HAL_RCC_OscConfig+0x278>)
 80005c2:	b1da      	cbz	r2, 80005fc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005c8:	f7ff fe02 	bl	80001d0 <HAL_GetTick>
 80005cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005d0:	079b      	lsls	r3, r3, #30
 80005d2:	d50d      	bpl.n	80005f0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005d8:	4b46      	ldr	r3, [pc, #280]	; (80006f4 <HAL_RCC_OscConfig+0x27c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005e2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f9      	bne.n	80005e2 <HAL_RCC_OscConfig+0x16a>
 80005ee:	e750      	b.n	8000492 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005f0:	f7ff fdee 	bl	80001d0 <HAL_GetTick>
 80005f4:	1b80      	subs	r0, r0, r6
 80005f6:	2802      	cmp	r0, #2
 80005f8:	d9e9      	bls.n	80005ce <HAL_RCC_OscConfig+0x156>
 80005fa:	e77f      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005fe:	f7ff fde7 	bl	80001d0 <HAL_GetTick>
 8000602:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000606:	079f      	lsls	r7, r3, #30
 8000608:	f57f af43 	bpl.w	8000492 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800060c:	f7ff fde0 	bl	80001d0 <HAL_GetTick>
 8000610:	1b80      	subs	r0, r0, r6
 8000612:	2802      	cmp	r0, #2
 8000614:	d9f6      	bls.n	8000604 <HAL_RCC_OscConfig+0x18c>
 8000616:	e771      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000618:	4c33      	ldr	r4, [pc, #204]	; (80006e8 <HAL_RCC_OscConfig+0x270>)
 800061a:	69e3      	ldr	r3, [r4, #28]
 800061c:	00d8      	lsls	r0, r3, #3
 800061e:	d424      	bmi.n	800066a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000620:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	69e3      	ldr	r3, [r4, #28]
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61e3      	str	r3, [r4, #28]
 800062a:	69e3      	ldr	r3, [r4, #28]
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000634:	4e30      	ldr	r6, [pc, #192]	; (80006f8 <HAL_RCC_OscConfig+0x280>)
 8000636:	6833      	ldr	r3, [r6, #0]
 8000638:	05d9      	lsls	r1, r3, #23
 800063a:	d518      	bpl.n	800066e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800063c:	68eb      	ldr	r3, [r5, #12]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d126      	bne.n	8000690 <HAL_RCC_OscConfig+0x218>
 8000642:	6a23      	ldr	r3, [r4, #32]
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc1 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800064e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000652:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000654:	6a23      	ldr	r3, [r4, #32]
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	d53f      	bpl.n	80006da <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800065a:	2f00      	cmp	r7, #0
 800065c:	f43f af1d 	beq.w	800049a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000660:	69e3      	ldr	r3, [r4, #28]
 8000662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000666:	61e3      	str	r3, [r4, #28]
 8000668:	e717      	b.n	800049a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800066a:	2700      	movs	r7, #0
 800066c:	e7e2      	b.n	8000634 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800066e:	6833      	ldr	r3, [r6, #0]
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000676:	f7ff fdab 	bl	80001d0 <HAL_GetTick>
 800067a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800067c:	6833      	ldr	r3, [r6, #0]
 800067e:	05da      	lsls	r2, r3, #23
 8000680:	d4dc      	bmi.n	800063c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	eba0 0008 	sub.w	r0, r0, r8
 800068a:	2864      	cmp	r0, #100	; 0x64
 800068c:	d9f6      	bls.n	800067c <HAL_RCC_OscConfig+0x204>
 800068e:	e735      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000690:	b9ab      	cbnz	r3, 80006be <HAL_RCC_OscConfig+0x246>
 8000692:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000694:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	6223      	str	r3, [r4, #32]
 800069e:	6a23      	ldr	r3, [r4, #32]
 80006a0:	f023 0304 	bic.w	r3, r3, #4
 80006a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006a6:	f7ff fd93 	bl	80001d0 <HAL_GetTick>
 80006aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006ac:	6a23      	ldr	r3, [r4, #32]
 80006ae:	0798      	lsls	r0, r3, #30
 80006b0:	d5d3      	bpl.n	800065a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	1b80      	subs	r0, r0, r6
 80006b8:	4540      	cmp	r0, r8
 80006ba:	d9f7      	bls.n	80006ac <HAL_RCC_OscConfig+0x234>
 80006bc:	e71e      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006be:	2b05      	cmp	r3, #5
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	d103      	bne.n	80006cc <HAL_RCC_OscConfig+0x254>
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6223      	str	r3, [r4, #32]
 80006ca:	e7ba      	b.n	8000642 <HAL_RCC_OscConfig+0x1ca>
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	6223      	str	r3, [r4, #32]
 80006d2:	6a23      	ldr	r3, [r4, #32]
 80006d4:	f023 0304 	bic.w	r3, r3, #4
 80006d8:	e7b6      	b.n	8000648 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006da:	f7ff fd79 	bl	80001d0 <HAL_GetTick>
 80006de:	eba0 0008 	sub.w	r0, r0, r8
 80006e2:	42b0      	cmp	r0, r6
 80006e4:	d9b6      	bls.n	8000654 <HAL_RCC_OscConfig+0x1dc>
 80006e6:	e709      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
 80006e8:	40021000 	.word	0x40021000
 80006ec:	42420000 	.word	0x42420000
 80006f0:	42420480 	.word	0x42420480
 80006f4:	20000008 	.word	0x20000008
 80006f8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006fc:	4c22      	ldr	r4, [pc, #136]	; (8000788 <HAL_RCC_OscConfig+0x310>)
 80006fe:	6863      	ldr	r3, [r4, #4]
 8000700:	f003 030c 	and.w	r3, r3, #12
 8000704:	2b08      	cmp	r3, #8
 8000706:	f43f aee2 	beq.w	80004ce <HAL_RCC_OscConfig+0x56>
 800070a:	2300      	movs	r3, #0
 800070c:	4e1f      	ldr	r6, [pc, #124]	; (800078c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800070e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000710:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000712:	d12b      	bne.n	800076c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000714:	f7ff fd5c 	bl	80001d0 <HAL_GetTick>
 8000718:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	0199      	lsls	r1, r3, #6
 800071e:	d41f      	bmi.n	8000760 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000720:	6a2b      	ldr	r3, [r5, #32]
 8000722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000726:	d105      	bne.n	8000734 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000728:	6862      	ldr	r2, [r4, #4]
 800072a:	68a9      	ldr	r1, [r5, #8]
 800072c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000730:	430a      	orrs	r2, r1
 8000732:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000734:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000736:	6862      	ldr	r2, [r4, #4]
 8000738:	430b      	orrs	r3, r1
 800073a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800073e:	4313      	orrs	r3, r2
 8000740:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000742:	2301      	movs	r3, #1
 8000744:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000746:	f7ff fd43 	bl	80001d0 <HAL_GetTick>
 800074a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	019a      	lsls	r2, r3, #6
 8000750:	f53f aea7 	bmi.w	80004a2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000754:	f7ff fd3c 	bl	80001d0 <HAL_GetTick>
 8000758:	1b40      	subs	r0, r0, r5
 800075a:	2802      	cmp	r0, #2
 800075c:	d9f6      	bls.n	800074c <HAL_RCC_OscConfig+0x2d4>
 800075e:	e6cd      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000760:	f7ff fd36 	bl	80001d0 <HAL_GetTick>
 8000764:	1bc0      	subs	r0, r0, r7
 8000766:	2802      	cmp	r0, #2
 8000768:	d9d7      	bls.n	800071a <HAL_RCC_OscConfig+0x2a2>
 800076a:	e6c7      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	f57f ae94 	bpl.w	80004a2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800077a:	f7ff fd29 	bl	80001d0 <HAL_GetTick>
 800077e:	1b40      	subs	r0, r0, r5
 8000780:	2802      	cmp	r0, #2
 8000782:	d9f6      	bls.n	8000772 <HAL_RCC_OscConfig+0x2fa>
 8000784:	e6ba      	b.n	80004fc <HAL_RCC_OscConfig+0x84>
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	42420060 	.word	0x42420060

08000790 <HAL_RCC_GetSysClockFreq>:
{
 8000790:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000794:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000796:	ac02      	add	r4, sp, #8
 8000798:	f103 0510 	add.w	r5, r3, #16
 800079c:	4622      	mov	r2, r4
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	6859      	ldr	r1, [r3, #4]
 80007a2:	3308      	adds	r3, #8
 80007a4:	c203      	stmia	r2!, {r0, r1}
 80007a6:	42ab      	cmp	r3, r5
 80007a8:	4614      	mov	r4, r2
 80007aa:	d1f7      	bne.n	800079c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ac:	2301      	movs	r3, #1
 80007ae:	f88d 3004 	strb.w	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007b4:	4911      	ldr	r1, [pc, #68]	; (80007fc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007b6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007bc:	f003 020c 	and.w	r2, r3, #12
 80007c0:	2a08      	cmp	r2, #8
 80007c2:	d117      	bne.n	80007f4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007c8:	a806      	add	r0, sp, #24
 80007ca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007cc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007d2:	d50c      	bpl.n	80007ee <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007d4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007dc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007de:	aa06      	add	r2, sp, #24
 80007e0:	4413      	add	r3, r2
 80007e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007ea:	b007      	add	sp, #28
 80007ec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_RCC_GetSysClockFreq+0x74>)
 80007f0:	4350      	muls	r0, r2
 80007f2:	e7fa      	b.n	80007ea <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007f6:	e7f8      	b.n	80007ea <HAL_RCC_GetSysClockFreq+0x5a>
 80007f8:	08001400 	.word	0x08001400
 80007fc:	40021000 	.word	0x40021000
 8000800:	007a1200 	.word	0x007a1200
 8000804:	003d0900 	.word	0x003d0900

08000808 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000808:	4a54      	ldr	r2, [pc, #336]	; (800095c <HAL_RCC_ClockConfig+0x154>)
{
 800080a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800080e:	6813      	ldr	r3, [r2, #0]
{
 8000810:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	428b      	cmp	r3, r1
{
 8000818:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081a:	d32a      	bcc.n	8000872 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800081c:	6829      	ldr	r1, [r5, #0]
 800081e:	078c      	lsls	r4, r1, #30
 8000820:	d434      	bmi.n	800088c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000822:	07ca      	lsls	r2, r1, #31
 8000824:	d447      	bmi.n	80008b6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	4a4d      	ldr	r2, [pc, #308]	; (800095c <HAL_RCC_ClockConfig+0x154>)
 8000828:	6813      	ldr	r3, [r2, #0]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	429e      	cmp	r6, r3
 8000830:	f0c0 8082 	bcc.w	8000938 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000834:	682a      	ldr	r2, [r5, #0]
 8000836:	4c4a      	ldr	r4, [pc, #296]	; (8000960 <HAL_RCC_ClockConfig+0x158>)
 8000838:	f012 0f04 	tst.w	r2, #4
 800083c:	f040 8087 	bne.w	800094e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000840:	0713      	lsls	r3, r2, #28
 8000842:	d506      	bpl.n	8000852 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000844:	6863      	ldr	r3, [r4, #4]
 8000846:	692a      	ldr	r2, [r5, #16]
 8000848:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800084c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000850:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000852:	f7ff ff9d 	bl	8000790 <HAL_RCC_GetSysClockFreq>
 8000856:	6863      	ldr	r3, [r4, #4]
 8000858:	4a42      	ldr	r2, [pc, #264]	; (8000964 <HAL_RCC_ClockConfig+0x15c>)
 800085a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800085e:	5cd3      	ldrb	r3, [r2, r3]
 8000860:	40d8      	lsrs	r0, r3
 8000862:	4b41      	ldr	r3, [pc, #260]	; (8000968 <HAL_RCC_ClockConfig+0x160>)
 8000864:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fc70 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800086c:	2000      	movs	r0, #0
}
 800086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000872:	6813      	ldr	r3, [r2, #0]
 8000874:	f023 0307 	bic.w	r3, r3, #7
 8000878:	430b      	orrs	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800087c:	6813      	ldr	r3, [r2, #0]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	4299      	cmp	r1, r3
 8000884:	d0ca      	beq.n	800081c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088c:	4b34      	ldr	r3, [pc, #208]	; (8000960 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800088e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000892:	bf1e      	ittt	ne
 8000894:	685a      	ldrne	r2, [r3, #4]
 8000896:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800089a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800089c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800089e:	bf42      	ittt	mi
 80008a0:	685a      	ldrmi	r2, [r3, #4]
 80008a2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008a6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	68a8      	ldr	r0, [r5, #8]
 80008ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008b0:	4302      	orrs	r2, r0
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	e7b5      	b.n	8000822 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b6:	686a      	ldr	r2, [r5, #4]
 80008b8:	4c29      	ldr	r4, [pc, #164]	; (8000960 <HAL_RCC_ClockConfig+0x158>)
 80008ba:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008bc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008be:	d11c      	bne.n	80008fa <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c4:	d0df      	beq.n	8000886 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008c6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008cc:	f023 0303 	bic.w	r3, r3, #3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008d4:	f7ff fc7c 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008da:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d114      	bne.n	800090a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	f003 030c 	and.w	r3, r3, #12
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d09d      	beq.n	8000826 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ea:	f7ff fc71 	bl	80001d0 <HAL_GetTick>
 80008ee:	1bc0      	subs	r0, r0, r7
 80008f0:	4540      	cmp	r0, r8
 80008f2:	d9f5      	bls.n	80008e0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80008f4:	2003      	movs	r0, #3
 80008f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008fa:	2a02      	cmp	r2, #2
 80008fc:	d102      	bne.n	8000904 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000902:	e7df      	b.n	80008c4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000904:	f013 0f02 	tst.w	r3, #2
 8000908:	e7dc      	b.n	80008c4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800090a:	2b02      	cmp	r3, #2
 800090c:	d10f      	bne.n	800092e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b08      	cmp	r3, #8
 8000916:	d086      	beq.n	8000826 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000918:	f7ff fc5a 	bl	80001d0 <HAL_GetTick>
 800091c:	1bc0      	subs	r0, r0, r7
 800091e:	4540      	cmp	r0, r8
 8000920:	d9f5      	bls.n	800090e <HAL_RCC_ClockConfig+0x106>
 8000922:	e7e7      	b.n	80008f4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000924:	f7ff fc54 	bl	80001d0 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	4540      	cmp	r0, r8
 800092c:	d8e2      	bhi.n	80008f4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800092e:	6863      	ldr	r3, [r4, #4]
 8000930:	f013 0f0c 	tst.w	r3, #12
 8000934:	d1f6      	bne.n	8000924 <HAL_RCC_ClockConfig+0x11c>
 8000936:	e776      	b.n	8000826 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000938:	6813      	ldr	r3, [r2, #0]
 800093a:	f023 0307 	bic.w	r3, r3, #7
 800093e:	4333      	orrs	r3, r6
 8000940:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000942:	6813      	ldr	r3, [r2, #0]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	429e      	cmp	r6, r3
 800094a:	d19c      	bne.n	8000886 <HAL_RCC_ClockConfig+0x7e>
 800094c:	e772      	b.n	8000834 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800094e:	6863      	ldr	r3, [r4, #4]
 8000950:	68e9      	ldr	r1, [r5, #12]
 8000952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000956:	430b      	orrs	r3, r1
 8000958:	6063      	str	r3, [r4, #4]
 800095a:	e771      	b.n	8000840 <HAL_RCC_ClockConfig+0x38>
 800095c:	40022000 	.word	0x40022000
 8000960:	40021000 	.word	0x40021000
 8000964:	08001515 	.word	0x08001515
 8000968:	20000008 	.word	0x20000008

0800096c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800096c:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800096e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	f042 0201 	orr.w	r2, r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f042 0201 	orr.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	4770      	bx	lr

08000982 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000982:	6803      	ldr	r3, [r0, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	f022 0201 	bic.w	r2, r2, #1
 800098a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800098c:	f241 1211 	movw	r2, #4369	; 0x1111
 8000990:	6a19      	ldr	r1, [r3, #32]
 8000992:	4211      	tst	r1, r2
 8000994:	d108      	bne.n	80009a8 <HAL_TIM_Base_Stop_IT+0x26>
 8000996:	f240 4244 	movw	r2, #1092	; 0x444
 800099a:	6a19      	ldr	r1, [r3, #32]
 800099c:	4211      	tst	r1, r2
 800099e:	bf02      	ittt	eq
 80009a0:	681a      	ldreq	r2, [r3, #0]
 80009a2:	f022 0201 	biceq.w	r2, r2, #1
 80009a6:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80009a8:	2000      	movs	r0, #0
 80009aa:	4770      	bx	lr

080009ac <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80009ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	f04f 0302 	mov.w	r3, #2
 80009b8:	d01c      	beq.n	80009f4 <HAL_TIM_ConfigClockSource+0x48>
 80009ba:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80009bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80009c0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80009c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80009c6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80009c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80009cc:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80009d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80009d2:	680a      	ldr	r2, [r1, #0]
 80009d4:	2a40      	cmp	r2, #64	; 0x40
 80009d6:	d079      	beq.n	8000acc <HAL_TIM_ConfigClockSource+0x120>
 80009d8:	d819      	bhi.n	8000a0e <HAL_TIM_ConfigClockSource+0x62>
 80009da:	2a10      	cmp	r2, #16
 80009dc:	f000 8093 	beq.w	8000b06 <HAL_TIM_ConfigClockSource+0x15a>
 80009e0:	d80a      	bhi.n	80009f8 <HAL_TIM_ConfigClockSource+0x4c>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	f000 8089 	beq.w	8000afa <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80009e8:	2301      	movs	r3, #1
 80009ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80009ee:	2300      	movs	r3, #0
 80009f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80009f4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80009f8:	2a20      	cmp	r2, #32
 80009fa:	f000 808a 	beq.w	8000b12 <HAL_TIM_ConfigClockSource+0x166>
 80009fe:	2a30      	cmp	r2, #48	; 0x30
 8000a00:	d1f2      	bne.n	80009e8 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a02:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a08:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a0c:	e036      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a0e:	2a70      	cmp	r2, #112	; 0x70
 8000a10:	d036      	beq.n	8000a80 <HAL_TIM_ConfigClockSource+0xd4>
 8000a12:	d81b      	bhi.n	8000a4c <HAL_TIM_ConfigClockSource+0xa0>
 8000a14:	2a50      	cmp	r2, #80	; 0x50
 8000a16:	d042      	beq.n	8000a9e <HAL_TIM_ConfigClockSource+0xf2>
 8000a18:	2a60      	cmp	r2, #96	; 0x60
 8000a1a:	d1e5      	bne.n	80009e8 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a1c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a1e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a20:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a24:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a26:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a28:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a2a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a2c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a34:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a38:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a3c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a3e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a40:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a46:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a4a:	e017      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a4c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a50:	d011      	beq.n	8000a76 <HAL_TIM_ConfigClockSource+0xca>
 8000a52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a56:	d1c7      	bne.n	80009e8 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a58:	688a      	ldr	r2, [r1, #8]
 8000a5a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a5c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a5e:	68c9      	ldr	r1, [r1, #12]
 8000a60:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a62:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a6a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000a6c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a74:	e002      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	e7b3      	b.n	80009e8 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a80:	688a      	ldr	r2, [r1, #8]
 8000a82:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a84:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a86:	68c9      	ldr	r1, [r1, #12]
 8000a88:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a8a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a92:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000a94:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000a96:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000a98:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000a9c:	e7ee      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000a9e:	684c      	ldr	r4, [r1, #4]
 8000aa0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000aa2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000aa4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000aa6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000aaa:	f025 0501 	bic.w	r5, r5, #1
 8000aae:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ab0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000ab2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ab4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ab8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000abe:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ac0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ac6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000aca:	e7d7      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000acc:	684c      	ldr	r4, [r1, #4]
 8000ace:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ad0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ad2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ad4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ad8:	f025 0501 	bic.w	r5, r5, #1
 8000adc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ade:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000ae0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ae2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ae6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000aec:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000aee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000af4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000af8:	e7c0      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000afa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000afc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b00:	f042 0207 	orr.w	r2, r2, #7
 8000b04:	e7ba      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b06:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b0c:	f042 0217 	orr.w	r2, r2, #23
 8000b10:	e7b4      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b18:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b1c:	e7ae      	b.n	8000a7c <HAL_TIM_ConfigClockSource+0xd0>

08000b1e <HAL_TIM_OC_DelayElapsedCallback>:
 8000b1e:	4770      	bx	lr

08000b20 <HAL_TIM_IC_CaptureCallback>:
 8000b20:	4770      	bx	lr

08000b22 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b22:	4770      	bx	lr

08000b24 <HAL_TIM_TriggerCallback>:
 8000b24:	4770      	bx	lr

08000b26 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b26:	6803      	ldr	r3, [r0, #0]
{
 8000b28:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b2a:	691a      	ldr	r2, [r3, #16]
{
 8000b2c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b2e:	0791      	lsls	r1, r2, #30
 8000b30:	d50e      	bpl.n	8000b50 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	0792      	lsls	r2, r2, #30
 8000b36:	d50b      	bpl.n	8000b50 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b38:	f06f 0202 	mvn.w	r2, #2
 8000b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b3e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b40:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b42:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b44:	079b      	lsls	r3, r3, #30
 8000b46:	d077      	beq.n	8000c38 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000b48:	f7ff ffea 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	691a      	ldr	r2, [r3, #16]
 8000b54:	0750      	lsls	r0, r2, #29
 8000b56:	d510      	bpl.n	8000b7a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	0751      	lsls	r1, r2, #29
 8000b5c:	d50d      	bpl.n	8000b7a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b5e:	f06f 0204 	mvn.w	r2, #4
 8000b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b64:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b66:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b68:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b6a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000b6e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b70:	d068      	beq.n	8000c44 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b72:	f7ff ffd5 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b76:	2300      	movs	r3, #0
 8000b78:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	0712      	lsls	r2, r2, #28
 8000b80:	d50f      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	0710      	lsls	r0, r2, #28
 8000b86:	d50c      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b88:	f06f 0208 	mvn.w	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b8e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b92:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b94:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000b96:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b98:	d05a      	beq.n	8000c50 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b9a:	f7ff ffc1 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	06d2      	lsls	r2, r2, #27
 8000ba8:	d510      	bpl.n	8000bcc <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	06d0      	lsls	r0, r2, #27
 8000bae:	d50d      	bpl.n	8000bcc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bb0:	f06f 0210 	mvn.w	r2, #16
 8000bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bb6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bb8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bbc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bc2:	d04b      	beq.n	8000c5c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc4:	f7ff ffac 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	07d1      	lsls	r1, r2, #31
 8000bd2:	d508      	bpl.n	8000be6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	07d2      	lsls	r2, r2, #31
 8000bd8:	d505      	bpl.n	8000be6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bda:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000be0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000be2:	f000 fafd 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	0610      	lsls	r0, r2, #24
 8000bec:	d508      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	0611      	lsls	r1, r2, #24
 8000bf2:	d505      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000bf8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000bfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000bfc:	f000 f8ab 	bl	8000d56 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	0652      	lsls	r2, r2, #25
 8000c06:	d508      	bpl.n	8000c1a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	0650      	lsls	r0, r2, #25
 8000c0c:	d505      	bpl.n	8000c1a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c14:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c16:	f7ff ff85 	bl	8000b24 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	0691      	lsls	r1, r2, #26
 8000c20:	d522      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	0692      	lsls	r2, r2, #26
 8000c26:	d51f      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c28:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c2c:	4620      	mov	r0, r4
}
 8000c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c34:	f000 b88e 	b.w	8000d54 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c38:	f7ff ff71 	bl	8000b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff ff70 	bl	8000b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c42:	e783      	b.n	8000b4c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c44:	f7ff ff6b 	bl	8000b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff ff6a 	bl	8000b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c4e:	e792      	b.n	8000b76 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c50:	f7ff ff65 	bl	8000b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff ff64 	bl	8000b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c5a:	e7a0      	b.n	8000b9e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c5c:	f7ff ff5f 	bl	8000b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff ff5e 	bl	8000b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c66:	e7af      	b.n	8000bc8 <HAL_TIM_IRQHandler+0xa2>
 8000c68:	bd10      	pop	{r4, pc}
	...

08000c6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000c6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d00a      	beq.n	8000c8a <TIM_Base_SetConfig+0x1e>
 8000c74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c78:	d007      	beq.n	8000c8a <TIM_Base_SetConfig+0x1e>
 8000c7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d003      	beq.n	8000c8a <TIM_Base_SetConfig+0x1e>
 8000c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d115      	bne.n	8000cb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000c8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c90:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <TIM_Base_SetConfig+0x6c>)
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d00a      	beq.n	8000cae <TIM_Base_SetConfig+0x42>
 8000c98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c9c:	d007      	beq.n	8000cae <TIM_Base_SetConfig+0x42>
 8000c9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d003      	beq.n	8000cae <TIM_Base_SetConfig+0x42>
 8000ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d103      	bne.n	8000cb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cb4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cb6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cbc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000cbe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000cc0:	688b      	ldr	r3, [r1, #8]
 8000cc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000cc4:	680b      	ldr	r3, [r1, #0]
 8000cc6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <TIM_Base_SetConfig+0x6c>)
 8000cca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000ccc:	bf04      	itt	eq
 8000cce:	690b      	ldreq	r3, [r1, #16]
 8000cd0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	6143      	str	r3, [r0, #20]
 8000cd6:	4770      	bx	lr
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <HAL_TIM_Base_Init>:
{
 8000cdc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000cde:	4604      	mov	r4, r0
 8000ce0:	b1a0      	cbz	r0, 8000d0c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ce2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cea:	b91b      	cbnz	r3, 8000cf4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000cec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000cf0:	f000 fb0a 	bl	8001308 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000cf4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cf6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000cf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cfc:	1d21      	adds	r1, r4, #4
 8000cfe:	f7ff ffb5 	bl	8000c6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d02:	2301      	movs	r3, #1
  return HAL_OK;
 8000d04:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bd10      	pop	{r4, pc}

08000d10 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d14:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	f04f 0302 	mov.w	r3, #2
 8000d1c:	d018      	beq.n	8000d50 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d22:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d24:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d26:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d28:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d2e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4322      	orrs	r2, r4
 8000d34:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d50:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <HAL_TIMEx_CommutationCallback>:
 8000d54:	4770      	bx	lr

08000d56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d56:	4770      	bx	lr

08000d58 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2210      	movs	r2, #16
{
 8000d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	eb0d 0002 	add.w	r0, sp, r2
 8000d64:	2100      	movs	r1, #0
 8000d66:	f000 fb37 	bl	80013d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000d6c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000df8 <MX_GPIO_Init+0xa0>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	699a      	ldr	r2, [r3, #24]
                          |UART_TX5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART_TX6_Pin|UART_TX7_Pin|UART_TX8_Pin|UART_TX9_Pin 
 8000d72:	4c20      	ldr	r4, [pc, #128]	; (8000df4 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000d7c:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	f002 0220 	and.w	r2, r2, #32
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000d88:	21f8      	movs	r1, #248	; 0xf8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	f042 0204 	orr.w	r2, r2, #4
 8000d8e:	619a      	str	r2, [r3, #24]
 8000d90:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
                          |UART_TX5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	f002 0204 	and.w	r2, r2, #4
 8000d98:	9202      	str	r2, [sp, #8]
 8000d9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	f042 0208 	orr.w	r2, r2, #8
 8000da4:	619a      	str	r2, [r3, #24]
 8000da6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000da8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	9303      	str	r3, [sp, #12]
 8000db0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000db2:	f7ff fb5b 	bl	800046c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UART_TX6_Pin|UART_TX7_Pin|UART_TX8_Pin|UART_TX9_Pin 
 8000db6:	2201      	movs	r2, #1
 8000db8:	4620      	mov	r0, r4
 8000dba:	f640 4107 	movw	r1, #3079	; 0xc07
 8000dbe:	f7ff fb55 	bl	800046c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000dc4:	23f8      	movs	r3, #248	; 0xf8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	a904      	add	r1, sp, #16
 8000dc8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = UART_TX1_Pin|UART_TX2_Pin|UART_TX3_Pin|UART_TX4_Pin 
 8000dca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f7ff fa6b 	bl	80002ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = UART_TX6_Pin|UART_TX7_Pin|UART_TX8_Pin|UART_TX9_Pin 
 8000dd6:	f640 4307 	movw	r3, #3079	; 0xc07
                          |UART_TX10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	a904      	add	r1, sp, #16
 8000ddc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = UART_TX6_Pin|UART_TX7_Pin|UART_TX8_Pin|UART_TX9_Pin 
 8000dde:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f7ff fa61 	bl	80002ac <HAL_GPIO_Init>

}
 8000dea:	b008      	add	sp, #32
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40010800 	.word	0x40010800

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e00:	2228      	movs	r2, #40	; 0x28
 8000e02:	2100      	movs	r1, #0
 8000e04:	a806      	add	r0, sp, #24
 8000e06:	f000 fae7 	bl	80013d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2214      	movs	r2, #20
 8000e0e:	a801      	add	r0, sp, #4
 8000e10:	f000 fae2 	bl	80013d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e26:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	f7ff fb23 	bl	8000478 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e44:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e48:	f7ff fcde 	bl	8000808 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000e4c:	b010      	add	sp, #64	; 0x40
 8000e4e:	bd10      	pop	{r4, pc}

08000e50 <main>:
{
 8000e50:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
  HAL_Init();
 8000e54:	f7ff f99e 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000e58:	f7ff ffd0 	bl	8000dfc <SystemClock_Config>
  MX_GPIO_Init();
 8000e5c:	f7ff ff7c 	bl	8000d58 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e60:	f000 fa1e 	bl	80012a0 <MX_TIM4_Init>
  UART1.GPIO_TX_Pin           = UART_TX1_Pin;
 8000e64:	2308      	movs	r3, #8
  UART2.GPIO_TX_Pin           = UART_TX2_Pin;
 8000e66:	2510      	movs	r5, #16
  UART1.GPIO_TX_Pin           = UART_TX1_Pin;
 8000e68:	4a66      	ldr	r2, [pc, #408]	; (8001004 <main+0x1b4>)
  UART3.GPIO_TX_Pin           = UART_TX3_Pin;
 8000e6a:	f8df b200 	ldr.w	fp, [pc, #512]	; 800106c <main+0x21c>
  UART1.GPIO_TX_Pin           = UART_TX1_Pin;
 8000e6e:	8393      	strh	r3, [r2, #28]
  UART1.TX_Ring_Buffer.Buffer = UART1_TX_Buffer;
 8000e70:	4b65      	ldr	r3, [pc, #404]	; (8001008 <main+0x1b8>)
  UART4.GPIO_TX_Pin           = UART_TX4_Pin;
 8000e72:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8001070 <main+0x220>
  UART1.TX_Ring_Buffer.Buffer = UART1_TX_Buffer;
 8000e76:	6013      	str	r3, [r2, #0]
  UART2.GPIO_TX_Pin           = UART_TX2_Pin;
 8000e78:	4b64      	ldr	r3, [pc, #400]	; (800100c <main+0x1bc>)
  UART5.GPIO_TX_Pin           = UART_TX5_Pin;
 8000e7a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8001074 <main+0x224>
  UART2.GPIO_TX_Pin           = UART_TX2_Pin;
 8000e7e:	839d      	strh	r5, [r3, #28]
  UART2.TX_Ring_Buffer.Buffer = UART2_TX_Buffer;
 8000e80:	4d63      	ldr	r5, [pc, #396]	; (8001010 <main+0x1c0>)
  UART1.GPIO_TX_Port          = UART_TX1_GPIO_Port;
 8000e82:	4c64      	ldr	r4, [pc, #400]	; (8001014 <main+0x1c4>)
  UART2.TX_Ring_Buffer.Buffer = UART2_TX_Buffer;
 8000e84:	601d      	str	r5, [r3, #0]
  UART3.TX_Ring_Buffer.Buffer = UART3_TX_Buffer;
 8000e86:	4d64      	ldr	r5, [pc, #400]	; (8001018 <main+0x1c8>)
  UART1.GPIO_TX_Port          = UART_TX1_GPIO_Port;
 8000e88:	6194      	str	r4, [r2, #24]
  UART3.TX_Ring_Buffer.Buffer = UART3_TX_Buffer;
 8000e8a:	f8cb 5000 	str.w	r5, [fp]
  UART4.GPIO_TX_Pin           = UART_TX4_Pin;
 8000e8e:	2540      	movs	r5, #64	; 0x40
  UART2.GPIO_TX_Port          = UART_TX2_GPIO_Port;
 8000e90:	619c      	str	r4, [r3, #24]
  UART3.GPIO_TX_Port          = UART_TX3_GPIO_Port;
 8000e92:	f8cb 4018 	str.w	r4, [fp, #24]
  UART4.GPIO_TX_Port          = UART_TX4_GPIO_Port;
 8000e96:	f8ca 4018 	str.w	r4, [sl, #24]
  UART5.GPIO_TX_Port          = UART_TX5_GPIO_Port;
 8000e9a:	f8c9 4018 	str.w	r4, [r9, #24]
  UART5.TX_Ring_Buffer.Buffer = UART5_TX_Buffer;
 8000e9e:	4c5f      	ldr	r4, [pc, #380]	; (800101c <main+0x1cc>)
  UART4.GPIO_TX_Pin           = UART_TX4_Pin;
 8000ea0:	f8aa 501c 	strh.w	r5, [sl, #28]
  UART5.TX_Ring_Buffer.Buffer = UART5_TX_Buffer;
 8000ea4:	f8c9 4000 	str.w	r4, [r9]
  UART4.TX_Ring_Buffer.Buffer = UART4_TX_Buffer;
 8000ea8:	4d5d      	ldr	r5, [pc, #372]	; (8001020 <main+0x1d0>)
  UART6.GPIO_TX_Pin           = UART_TX6_Pin;
 8000eaa:	2401      	movs	r4, #1
  UART1.TX_Ring_Buffer.Read_Index = 0;
 8000eac:	2100      	movs	r1, #0
  UART1.TX_Ring_Buffer.Size   = sizeof(UART1_TX_Buffer);
 8000eae:	2020      	movs	r0, #32
  UART4.TX_Ring_Buffer.Buffer = UART4_TX_Buffer;
 8000eb0:	f8ca 5000 	str.w	r5, [sl]
  UART5.GPIO_TX_Pin           = UART_TX5_Pin;
 8000eb4:	2580      	movs	r5, #128	; 0x80
  UART6.GPIO_TX_Pin           = UART_TX6_Pin;
 8000eb6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001078 <main+0x228>
  UART6.GPIO_TX_Port          = UART_TX6_GPIO_Port;
 8000eba:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800107c <main+0x22c>
  UART6.GPIO_TX_Pin           = UART_TX6_Pin;
 8000ebe:	f8a8 401c 	strh.w	r4, [r8, #28]
  UART6.TX_Ring_Buffer.Buffer = UART6_TX_Buffer;
 8000ec2:	4c58      	ldr	r4, [pc, #352]	; (8001024 <main+0x1d4>)
  UART1.TX_Ring_Buffer.Size   = sizeof(UART1_TX_Buffer);
 8000ec4:	8110      	strh	r0, [r2, #8]
  UART1.TX_Ring_Buffer.Read_Index = 0;
 8000ec6:	80d1      	strh	r1, [r2, #6]
  UART1.TX_Ring_Buffer.Write_Index = 0;
 8000ec8:	8091      	strh	r1, [r2, #4]
  UART2.TX_Ring_Buffer.Read_Index = 0;
 8000eca:	80d9      	strh	r1, [r3, #6]
  UART2.TX_Ring_Buffer.Write_Index = 0;
 8000ecc:	8099      	strh	r1, [r3, #4]
  UART3.TX_Ring_Buffer.Read_Index = 0;
 8000ece:	f8ab 1006 	strh.w	r1, [fp, #6]
  UART3.TX_Ring_Buffer.Write_Index = 0;
 8000ed2:	f8ab 1004 	strh.w	r1, [fp, #4]
  UART4.TX_Ring_Buffer.Read_Index = 0;
 8000ed6:	f8aa 1006 	strh.w	r1, [sl, #6]
  UART4.TX_Ring_Buffer.Write_Index = 0;
 8000eda:	f8aa 1004 	strh.w	r1, [sl, #4]
  UART5.TX_Ring_Buffer.Read_Index = 0;
 8000ede:	f8a9 1006 	strh.w	r1, [r9, #6]
  UART5.TX_Ring_Buffer.Write_Index = 0;
 8000ee2:	f8a9 1004 	strh.w	r1, [r9, #4]
  UART2.TX_Ring_Buffer.Size   = sizeof(UART2_TX_Buffer);
 8000ee6:	8118      	strh	r0, [r3, #8]
  UART2.TX_Ring_Buffer.Write_Index = 0;
 8000ee8:	9300      	str	r3, [sp, #0]
  UART3.GPIO_TX_Pin           = UART_TX3_Pin;
 8000eea:	f8ab 001c 	strh.w	r0, [fp, #28]
  UART3.TX_Ring_Buffer.Size   = sizeof(UART3_TX_Buffer);
 8000eee:	f8ab 0008 	strh.w	r0, [fp, #8]
  UART4.TX_Ring_Buffer.Size   = sizeof(UART4_TX_Buffer);
 8000ef2:	f8aa 0008 	strh.w	r0, [sl, #8]
  UART5.GPIO_TX_Pin           = UART_TX5_Pin;
 8000ef6:	f8a9 501c 	strh.w	r5, [r9, #28]
  UART5.TX_Ring_Buffer.Size   = sizeof(UART5_TX_Buffer);
 8000efa:	f8a9 0008 	strh.w	r0, [r9, #8]
  UART6.GPIO_TX_Port          = UART_TX6_GPIO_Port;
 8000efe:	f8c8 e018 	str.w	lr, [r8, #24]
  UART6.TX_Ring_Buffer.Buffer = UART6_TX_Buffer;
 8000f02:	f8c8 4000 	str.w	r4, [r8]
  UART7.GPIO_TX_Pin           = UART_TX7_Pin;
 8000f06:	2402      	movs	r4, #2
 8000f08:	4f47      	ldr	r7, [pc, #284]	; (8001028 <main+0x1d8>)
  UART8.GPIO_TX_Pin           = UART_TX8_Pin;
 8000f0a:	4e48      	ldr	r6, [pc, #288]	; (800102c <main+0x1dc>)
  UART7.GPIO_TX_Pin           = UART_TX7_Pin;
 8000f0c:	83bc      	strh	r4, [r7, #28]
  UART7.TX_Ring_Buffer.Buffer = UART7_TX_Buffer;
 8000f0e:	4c48      	ldr	r4, [pc, #288]	; (8001030 <main+0x1e0>)
  UART10.GPIO_TX_Pin           = UART_TX10_Pin;
 8000f10:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  UART7.TX_Ring_Buffer.Buffer = UART7_TX_Buffer;
 8000f14:	603c      	str	r4, [r7, #0]
  UART8.GPIO_TX_Pin           = UART_TX8_Pin;
 8000f16:	2404      	movs	r4, #4
 8000f18:	83b4      	strh	r4, [r6, #28]
  UART8.TX_Ring_Buffer.Buffer = UART8_TX_Buffer;
 8000f1a:	4c46      	ldr	r4, [pc, #280]	; (8001034 <main+0x1e4>)
  UART9.GPIO_TX_Pin           = UART_TX9_Pin;
 8000f1c:	4d46      	ldr	r5, [pc, #280]	; (8001038 <main+0x1e8>)
  UART8.TX_Ring_Buffer.Buffer = UART8_TX_Buffer;
 8000f1e:	6034      	str	r4, [r6, #0]
  UART9.GPIO_TX_Pin           = UART_TX9_Pin;
 8000f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000f24:	83ac      	strh	r4, [r5, #28]
  UART9.TX_Ring_Buffer.Buffer = UART9_TX_Buffer;
 8000f26:	4c45      	ldr	r4, [pc, #276]	; (800103c <main+0x1ec>)
  UART7.GPIO_TX_Port          = UART_TX7_GPIO_Port;
 8000f28:	f8c7 e018 	str.w	lr, [r7, #24]
  UART9.TX_Ring_Buffer.Buffer = UART9_TX_Buffer;
 8000f2c:	602c      	str	r4, [r5, #0]
  UART10.GPIO_TX_Pin           = UART_TX10_Pin;
 8000f2e:	4c44      	ldr	r4, [pc, #272]	; (8001040 <main+0x1f0>)
  UART8.GPIO_TX_Port          = UART_TX8_GPIO_Port;
 8000f30:	f8c6 e018 	str.w	lr, [r6, #24]
  UART9.GPIO_TX_Port          = UART_TX9_GPIO_Port;
 8000f34:	f8c5 e018 	str.w	lr, [r5, #24]
  UART10.GPIO_TX_Port          = UART_TX10_GPIO_Port;
 8000f38:	f8c4 e018 	str.w	lr, [r4, #24]
  UART10.TX_Ring_Buffer.Buffer = UART10_TX_Buffer;
 8000f3c:	f8df e140 	ldr.w	lr, [pc, #320]	; 8001080 <main+0x230>
  UART6.TX_Ring_Buffer.Size   = sizeof(UART6_TX_Buffer);
 8000f40:	f8a8 0008 	strh.w	r0, [r8, #8]
  UART7.TX_Ring_Buffer.Size   = sizeof(UART7_TX_Buffer);
 8000f44:	8138      	strh	r0, [r7, #8]
  UART8.TX_Ring_Buffer.Size   = sizeof(UART8_TX_Buffer);
 8000f46:	8130      	strh	r0, [r6, #8]
  UART9.TX_Ring_Buffer.Size   = sizeof(UART9_TX_Buffer);
 8000f48:	8128      	strh	r0, [r5, #8]
  UART10.TX_Ring_Buffer.Size   = sizeof(UART10_TX_Buffer);
 8000f4a:	8120      	strh	r0, [r4, #8]
  Soft_Uart_Init(&UART1);
 8000f4c:	4610      	mov	r0, r2
  UART10.GPIO_TX_Pin           = UART_TX10_Pin;
 8000f4e:	f8a4 c01c 	strh.w	ip, [r4, #28]
  UART10.TX_Ring_Buffer.Buffer = UART10_TX_Buffer;
 8000f52:	f8c4 e000 	str.w	lr, [r4]
  UART6.TX_Ring_Buffer.Read_Index = 0;
 8000f56:	f8a8 1006 	strh.w	r1, [r8, #6]
  UART6.TX_Ring_Buffer.Write_Index = 0;
 8000f5a:	f8a8 1004 	strh.w	r1, [r8, #4]
  UART7.TX_Ring_Buffer.Read_Index = 0;
 8000f5e:	80f9      	strh	r1, [r7, #6]
  UART7.TX_Ring_Buffer.Write_Index = 0;
 8000f60:	80b9      	strh	r1, [r7, #4]
  UART8.TX_Ring_Buffer.Read_Index = 0;
 8000f62:	80f1      	strh	r1, [r6, #6]
  UART8.TX_Ring_Buffer.Write_Index = 0;
 8000f64:	80b1      	strh	r1, [r6, #4]
  UART9.TX_Ring_Buffer.Read_Index = 0;
 8000f66:	80e9      	strh	r1, [r5, #6]
  UART9.TX_Ring_Buffer.Write_Index = 0;
 8000f68:	80a9      	strh	r1, [r5, #4]
  UART10.TX_Ring_Buffer.Read_Index = 0;
 8000f6a:	80e1      	strh	r1, [r4, #6]
  UART10.TX_Ring_Buffer.Write_Index = 0;
 8000f6c:	80a1      	strh	r1, [r4, #4]
  Soft_Uart_Init(&UART1);
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	f000 f8b6 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART2);
 8000f74:	9b00      	ldr	r3, [sp, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f8b2 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART3);
 8000f7c:	4658      	mov	r0, fp
 8000f7e:	f000 f8af 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART4);
 8000f82:	4650      	mov	r0, sl
 8000f84:	f000 f8ac 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART5);
 8000f88:	4648      	mov	r0, r9
 8000f8a:	f000 f8a9 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART6);
 8000f8e:	4640      	mov	r0, r8
 8000f90:	f000 f8a6 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART7);
 8000f94:	4638      	mov	r0, r7
 8000f96:	f000 f8a3 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART8);
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	f000 f8a0 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART9);
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f000 f89d 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Init(&UART10);
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f000 f89a 	bl	80010e0 <Soft_Uart_Init>
  Soft_Uart_Send_String(&UART1, "Hello World! from UART1\r\n");
 8000fac:	9a01      	ldr	r2, [sp, #4]
 8000fae:	4925      	ldr	r1, [pc, #148]	; (8001044 <main+0x1f4>)
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f000 f903 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART2, "Hello World! from UART2\r\n");
 8000fb6:	9b00      	ldr	r3, [sp, #0]
 8000fb8:	4923      	ldr	r1, [pc, #140]	; (8001048 <main+0x1f8>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f8fe 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART3, "Hello World! from UART3\r\n");
 8000fc0:	4922      	ldr	r1, [pc, #136]	; (800104c <main+0x1fc>)
 8000fc2:	4658      	mov	r0, fp
 8000fc4:	f000 f8fa 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART4, "Hello World! from UART4\r\n");
 8000fc8:	4921      	ldr	r1, [pc, #132]	; (8001050 <main+0x200>)
 8000fca:	4650      	mov	r0, sl
 8000fcc:	f000 f8f6 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART5, "Hello World! from UART5\r\n");
 8000fd0:	4920      	ldr	r1, [pc, #128]	; (8001054 <main+0x204>)
 8000fd2:	4648      	mov	r0, r9
 8000fd4:	f000 f8f2 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART6, "Hello World! from UART6\r\n");
 8000fd8:	491f      	ldr	r1, [pc, #124]	; (8001058 <main+0x208>)
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f000 f8ee 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART7, "Hello World! from UART7\r\n");
 8000fe0:	491e      	ldr	r1, [pc, #120]	; (800105c <main+0x20c>)
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	f000 f8ea 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART8, "Hello World! from UART8\r\n");
 8000fe8:	491d      	ldr	r1, [pc, #116]	; (8001060 <main+0x210>)
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 f8e6 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART9, "Hello World! from UART9\r\n");
 8000ff0:	491c      	ldr	r1, [pc, #112]	; (8001064 <main+0x214>)
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f000 f8e2 	bl	80011bc <Soft_Uart_Send_String>
  Soft_Uart_Send_String(&UART10, "Hello World! from UART10\r\n");
 8000ff8:	491b      	ldr	r1, [pc, #108]	; (8001068 <main+0x218>)
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f000 f8de 	bl	80011bc <Soft_Uart_Send_String>
 8001000:	e7fe      	b.n	8001000 <main+0x1b0>
 8001002:	bf00      	nop
 8001004:	20000030 	.word	0x20000030
 8001008:	20000090 	.word	0x20000090
 800100c:	20000120 	.word	0x20000120
 8001010:	200000e0 	.word	0x200000e0
 8001014:	40010800 	.word	0x40010800
 8001018:	20000260 	.word	0x20000260
 800101c:	20000100 	.word	0x20000100
 8001020:	20000300 	.word	0x20000300
 8001024:	20000240 	.word	0x20000240
 8001028:	200001e0 	.word	0x200001e0
 800102c:	20000060 	.word	0x20000060
 8001030:	20000150 	.word	0x20000150
 8001034:	200001c0 	.word	0x200001c0
 8001038:	20000280 	.word	0x20000280
 800103c:	200002b0 	.word	0x200002b0
 8001040:	20000210 	.word	0x20000210
 8001044:	08001410 	.word	0x08001410
 8001048:	0800142a 	.word	0x0800142a
 800104c:	08001444 	.word	0x08001444
 8001050:	0800145e 	.word	0x0800145e
 8001054:	08001478 	.word	0x08001478
 8001058:	08001492 	.word	0x08001492
 800105c:	080014ac 	.word	0x080014ac
 8001060:	080014c6 	.word	0x080014c6
 8001064:	080014e0 	.word	0x080014e0
 8001068:	080014fa 	.word	0x080014fa
 800106c:	20000190 	.word	0x20000190
 8001070:	200002d0 	.word	0x200002d0
 8001074:	200000b0 	.word	0x200000b0
 8001078:	20000320 	.word	0x20000320
 800107c:	40010c00 	.word	0x40010c00
 8001080:	20000170 	.word	0x20000170

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	4770      	bx	lr

08001086 <Ring_Buffer_Put_Char>:
    if (handle->Write_Index == handle->Read_Index)
	{
        //over flow
	}

    handle->Buffer[handle->Write_Index] = data;
 8001086:	8883      	ldrh	r3, [r0, #4]
 8001088:	6802      	ldr	r2, [r0, #0]
 800108a:	54d1      	strb	r1, [r2, r3]

    handle->Write_Index++;
 800108c:	8883      	ldrh	r3, [r0, #4]

    if (handle->Write_Index == handle->Size)
 800108e:	8902      	ldrh	r2, [r0, #8]
    handle->Write_Index++;
 8001090:	3301      	adds	r3, #1
 8001092:	b29b      	uxth	r3, r3
    if (handle->Write_Index == handle->Size)
 8001094:	429a      	cmp	r2, r3
    handle->Write_Index++;
 8001096:	8083      	strh	r3, [r0, #4]
	{
	handle->Write_Index = 0;
 8001098:	bf04      	itt	eq
 800109a:	2300      	moveq	r3, #0
 800109c:	8083      	strheq	r3, [r0, #4]
	}

    return 1;
    }
 800109e:	2001      	movs	r0, #1
 80010a0:	4770      	bx	lr

080010a2 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 80010a2:	88c3      	ldrh	r3, [r0, #6]
 80010a4:	8882      	ldrh	r2, [r0, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d102      	bne.n	80010b0 <Ring_Buffer_Get_Char+0xe>
	{
	*data = 0;
 80010aa:	2000      	movs	r0, #0
 80010ac:	7008      	strb	r0, [r1, #0]
	return 0;
 80010ae:	4770      	bx	lr
	}

    *data = handle->Buffer[handle->Read_Index];
 80010b0:	6802      	ldr	r2, [r0, #0]
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	700b      	strb	r3, [r1, #0]

    handle->Read_Index++;
 80010b6:	88c3      	ldrh	r3, [r0, #6]

    if (handle->Read_Index == handle->Size)
 80010b8:	8902      	ldrh	r2, [r0, #8]
    handle->Read_Index++;
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29b      	uxth	r3, r3
    if (handle->Read_Index == handle->Size)
 80010be:	429a      	cmp	r2, r3
    handle->Read_Index++;
 80010c0:	80c3      	strh	r3, [r0, #6]
	{
	handle->Read_Index = 0;
 80010c2:	bf04      	itt	eq
 80010c4:	2300      	moveq	r3, #0
 80010c6:	80c3      	strheq	r3, [r0, #6]
	}

    return 1;
 80010c8:	2001      	movs	r0, #1
    }
 80010ca:	4770      	bx	lr

080010cc <Ring_Buffer_Get_Count>:
    }


uint16_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 80010cc:	8883      	ldrh	r3, [r0, #4]
 80010ce:	88c2      	ldrh	r2, [r0, #6]
 80010d0:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 80010d2:	bf37      	itett	cc
 80010d4:	8900      	ldrhcc	r0, [r0, #8]
	return (handle->Write_Index - handle->Read_Index);
 80010d6:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 80010d8:	18c0      	addcc	r0, r0, r3
 80010da:	1a80      	subcc	r0, r0, r2
 80010dc:	b280      	uxth	r0, r0
    }
 80010de:	4770      	bx	lr

080010e0 <Soft_Uart_Init>:
void Soft_Uart_Init(Soft_Uart_t* uart_handle)
    {
    /**** TIM configured in cube to generate interrupt every 1/baud rate *********/
    /**** GPIO pin configured in cube *********/

     if(Soft_Uart_Count< MAX_SOFT_UART)
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <Soft_Uart_Init+0x14>)
 80010e2:	7813      	ldrb	r3, [r2, #0]
 80010e4:	2b09      	cmp	r3, #9
	 {
	 Soft_Uart_List[Soft_Uart_Count] = uart_handle;
 80010e6:	bf9f      	itttt	ls
 80010e8:	4903      	ldrls	r1, [pc, #12]	; (80010f8 <Soft_Uart_Init+0x18>)
 80010ea:	f841 0023 	strls.w	r0, [r1, r3, lsl #2]
	 Soft_Uart_Count++;
 80010ee:	3301      	addls	r3, #1
 80010f0:	7013      	strbls	r3, [r2, #0]
 80010f2:	4770      	bx	lr
 80010f4:	20000028 	.word	0x20000028
 80010f8:	20000350 	.word	0x20000350

080010fc <_104us_ISR>:
	 }
    }

void _104us_ISR()
    {
 80010fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    Soft_Uart_t* uart_handle = NULL;
    Uart_Ring_Buffer* ring_buffer_handle = NULL;
    uint8_t uart_active_count = 0;

    for (uint8_t i = 0; i < Soft_Uart_Count; i++)
 8001100:	2600      	movs	r6, #0
 8001102:	2701      	movs	r7, #1
    uint8_t uart_active_count = 0;
 8001104:	4635      	mov	r5, r6
    for (uint8_t i = 0; i < Soft_Uart_Count; i++)
 8001106:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80011b4 <_104us_ISR+0xb8>
	{

	uart_handle = Soft_Uart_List[i];
 800110a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80011b8 <_104us_ISR+0xbc>
    for (uint8_t i = 0; i < Soft_Uart_Count; i++)
 800110e:	f898 2000 	ldrb.w	r2, [r8]
 8001112:	b2f3      	uxtb	r3, r6
 8001114:	429a      	cmp	r2, r3
 8001116:	d806      	bhi.n	8001126 <_104us_ISR+0x2a>


	}

    // if all soft_uart are idle disable tim interrupt
    if(!uart_active_count)
 8001118:	2d00      	cmp	r5, #0
 800111a:	d146      	bne.n	80011aa <_104us_ISR+0xae>
	{
	HAL_TIM_Base_Stop_IT(&SOFT_UART_TIM);
	}

    }
 800111c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_TIM_Base_Stop_IT(&SOFT_UART_TIM);
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <_104us_ISR+0xb4>)
 8001122:	f7ff bc2e 	b.w	8000982 <HAL_TIM_Base_Stop_IT>
	uart_handle = Soft_Uart_List[i];
 8001126:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	if(!uart_handle->TX_Enable)
 800112a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800112e:	b92b      	cbnz	r3, 800113c <_104us_ISR+0x40>
	if (Ring_Buffer_Get_Count(ring_buffer_handle))
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff ffcb 	bl	80010cc <Ring_Buffer_Get_Count>
 8001136:	b1e0      	cbz	r0, 8001172 <_104us_ISR+0x76>
	    uart_handle->TX_Enable = 1;
 8001138:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
	if(uart_handle->TX_Enable)
 800113c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001140:	b1ab      	cbz	r3, 800116e <_104us_ISR+0x72>
	if (!(uart_handle->TX_Bit_Count)) //start bit
 8001142:	f894 a026 	ldrb.w	sl, [r4, #38]	; 0x26
	    uart_active_count++;
 8001146:	3501      	adds	r5, #1
 8001148:	b2ed      	uxtb	r5, r5
	if (!(uart_handle->TX_Bit_Count)) //start bit
 800114a:	f1ba 0f00 	cmp.w	sl, #0
 800114e:	d113      	bne.n	8001178 <_104us_ISR+0x7c>
	    Ring_Buffer_Get_Char(ring_buffer_handle, &uart_handle->TX_Byte);
 8001150:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ffa4 	bl	80010a2 <Ring_Buffer_Get_Char>
	    HAL_GPIO_WritePin(uart_handle->GPIO_TX_Port, uart_handle->GPIO_TX_Pin, GPIO_PIN_RESET);
 800115a:	4652      	mov	r2, sl
 800115c:	8ba1      	ldrh	r1, [r4, #28]
		HAL_GPIO_WritePin(uart_handle->GPIO_TX_Port, uart_handle->GPIO_TX_Pin, GPIO_PIN_RESET);
 800115e:	69a0      	ldr	r0, [r4, #24]
 8001160:	f7ff f984 	bl	800046c <HAL_GPIO_WritePin>
	    uart_handle->TX_Bit_Count++;
 8001164:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8001168:	3301      	adds	r3, #1
 800116a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800116e:	3601      	adds	r6, #1
 8001170:	e7cd      	b.n	800110e <_104us_ISR+0x12>
	    uart_handle->TC_Flag = 1;
 8001172:	f884 702b 	strb.w	r7, [r4, #43]	; 0x2b
 8001176:	e7e1      	b.n	800113c <_104us_ISR+0x40>
	else if (uart_handle->TX_Bit_Count < 9) //data frame
 8001178:	f1ba 0f08 	cmp.w	sl, #8
 800117c:	8ba1      	ldrh	r1, [r4, #28]
 800117e:	d80a      	bhi.n	8001196 <_104us_ISR+0x9a>
	    if ((uart_handle->TX_Byte >> (uart_handle->TX_Bit_Count - 1)) & 0x01)
 8001180:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001184:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8001188:	fa43 f202 	asr.w	r2, r3, r2
 800118c:	f012 0201 	ands.w	r2, r2, #1
		HAL_GPIO_WritePin(uart_handle->GPIO_TX_Port, uart_handle->GPIO_TX_Pin, GPIO_PIN_SET);
 8001190:	bf18      	it	ne
 8001192:	2201      	movne	r2, #1
 8001194:	e7e3      	b.n	800115e <_104us_ISR+0x62>
	    HAL_GPIO_WritePin(uart_handle->GPIO_TX_Port, uart_handle->GPIO_TX_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	69a0      	ldr	r0, [r4, #24]
 800119a:	f7ff f967 	bl	800046c <HAL_GPIO_WritePin>
	    uart_handle->TX_Bit_Count = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	    uart_handle->TX_Enable = 0;
 80011a4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80011a8:	e7e1      	b.n	800116e <_104us_ISR+0x72>
 80011aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ae:	bf00      	nop
 80011b0:	20000378 	.word	0x20000378
 80011b4:	20000028 	.word	0x20000028
 80011b8:	20000350 	.word	0x20000350

080011bc <Soft_Uart_Send_String>:
    Ring_Buffer_Put_Char(ring_buffer_handle, data);
    HAL_TIM_Base_Start_IT(&SOFT_UART_TIM);
    }

void Soft_Uart_Send_String(Soft_Uart_t* uart_handle, char* str)
    {
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	4605      	mov	r5, r0
 80011c0:	1e4c      	subs	r4, r1, #1

    Uart_Ring_Buffer* ring_buffer_handle = &uart_handle->TX_Ring_Buffer;

    while (*str != '\0')
 80011c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80011c6:	b921      	cbnz	r1, 80011d2 <Soft_Uart_Send_String+0x16>
	{
	Ring_Buffer_Put_Char(ring_buffer_handle, *str++);
	}
    HAL_TIM_Base_Start_IT(&SOFT_UART_TIM);
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <Soft_Uart_Send_String+0x20>)
    }
 80011ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_TIM_Base_Start_IT(&SOFT_UART_TIM);
 80011ce:	f7ff bbcd 	b.w	800096c <HAL_TIM_Base_Start_IT>
	Ring_Buffer_Put_Char(ring_buffer_handle, *str++);
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff ff57 	bl	8001086 <Ring_Buffer_Put_Char>
 80011d8:	e7f3      	b.n	80011c2 <Soft_Uart_Send_String+0x6>
 80011da:	bf00      	nop
 80011dc:	20000378 	.word	0x20000378

080011e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
    if (htim == &SOFT_UART_TIM)
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xc>)
 80011e2:	4283      	cmp	r3, r0
 80011e4:	d101      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0xa>
	{
	_104us_ISR();
 80011e6:	f7ff bf89 	b.w	80010fc <_104us_ISR>
 80011ea:	4770      	bx	lr
 80011ec:	20000378 	.word	0x20000378

080011f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_MspInit+0x3c>)
{
 80011f2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	f002 0201 	and.w	r2, r2, #1
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800120c:	61da      	str	r2, [r3, #28]
 800120e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800121a:	6853      	ldr	r3, [r2, #4]
 800121c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001224:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	b002      	add	sp, #8
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000

08001234 <NMI_Handler>:
 8001234:	4770      	bx	lr

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	e7fe      	b.n	800123a <BusFault_Handler>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler>

0800123e <SVC_Handler>:
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f7fe bfb8 	b.w	80001b8 <HAL_IncTick>

08001248 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001248:	4801      	ldr	r0, [pc, #4]	; (8001250 <TIM4_IRQHandler+0x8>)
 800124a:	f7ff bc6c 	b.w	8000b26 <HAL_TIM_IRQHandler>
 800124e:	bf00      	nop
 8001250:	20000378 	.word	0x20000378

08001254 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SystemInit+0x40>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f042 0201 	orr.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <SystemInit+0x44>)
 8001262:	400a      	ands	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800126c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001270:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001278:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001280:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001282:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001286:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <SystemInit+0x48>)
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	f8ff0000 	.word	0xf8ff0000
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	2210      	movs	r2, #16
 80012a4:	2100      	movs	r1, #0
 80012a6:	a802      	add	r0, sp, #8
 80012a8:	f000 f896 	bl	80013d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = (72-1);
 80012ac:	2247      	movs	r2, #71	; 0x47
  htim4.Instance = TIM4;
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM4_Init+0x60>)
  htim4.Init.Prescaler = (72-1);
 80012b0:	4914      	ldr	r1, [pc, #80]	; (8001304 <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	2300      	movs	r3, #0
  htim4.Init.Prescaler = (72-1);
 80012b4:	e880 0006 	stmia.w	r0, {r1, r2}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = (104-1);
 80012b8:	2267      	movs	r2, #103	; 0x67
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = (104-1);
 80012c0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012c6:	f7ff fd09 	bl	8000cdc <HAL_TIM_Base_Init>
 80012ca:	b108      	cbz	r0, 80012d0 <MX_TIM4_Init+0x30>
  {
    Error_Handler();
 80012cc:	f7ff feda 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012d4:	a902      	add	r1, sp, #8
 80012d6:	480a      	ldr	r0, [pc, #40]	; (8001300 <MX_TIM4_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012da:	f7ff fb67 	bl	80009ac <HAL_TIM_ConfigClockSource>
 80012de:	b108      	cbz	r0, 80012e4 <MX_TIM4_Init+0x44>
  {
    Error_Handler();
 80012e0:	f7ff fed0 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e6:	4669      	mov	r1, sp
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ee:	f7ff fd0f 	bl	8000d10 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	b108      	cbz	r0, 80012f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012f4:	f7ff fec6 	bl	8001084 <Error_Handler>
  }

}
 80012f8:	b007      	add	sp, #28
 80012fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012fe:	bf00      	nop
 8001300:	20000378 	.word	0x20000378
 8001304:	40000800 	.word	0x40000800

08001308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001308:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM4)
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_TIM_Base_MspInit+0x38>)
 800130c:	6802      	ldr	r2, [r0, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d112      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001312:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001316:	69da      	ldr	r2, [r3, #28]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001318:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800131a:	f042 0204 	orr.w	r2, r2, #4
 800131e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001322:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001324:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800132e:	f7fe ff67 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001332:	201e      	movs	r0, #30
 8001334:	f7fe ff98 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001338:	b003      	add	sp, #12
 800133a:	f85d fb04 	ldr.w	pc, [sp], #4
 800133e:	bf00      	nop
 8001340:	40000800 	.word	0x40000800

08001344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001344:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800134a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800134c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001354:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001356:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136a:	f7ff ff73 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f000 f80f 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff fd6d 	bl	8000e50 <main>
  bx lr
 8001376:	4770      	bx	lr
  ldr r3, =_sidata
 8001378:	08001530 	.word	0x08001530
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001388:	200003b8 	.word	0x200003b8

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	2500      	movs	r5, #0
 8001394:	4e0c      	ldr	r6, [pc, #48]	; (80013c8 <__libc_init_array+0x38>)
 8001396:	4c0d      	ldr	r4, [pc, #52]	; (80013cc <__libc_init_array+0x3c>)
 8001398:	1ba4      	subs	r4, r4, r6
 800139a:	10a4      	asrs	r4, r4, #2
 800139c:	42a5      	cmp	r5, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	f000 f822 	bl	80013e8 <_init>
 80013a4:	2500      	movs	r5, #0
 80013a6:	4e0a      	ldr	r6, [pc, #40]	; (80013d0 <__libc_init_array+0x40>)
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <__libc_init_array+0x44>)
 80013aa:	1ba4      	subs	r4, r4, r6
 80013ac:	10a4      	asrs	r4, r4, #2
 80013ae:	42a5      	cmp	r5, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013b8:	4798      	blx	r3
 80013ba:	3501      	adds	r5, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c2:	4798      	blx	r3
 80013c4:	3501      	adds	r5, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08001528 	.word	0x08001528
 80013cc:	08001528 	.word	0x08001528
 80013d0:	08001528 	.word	0x08001528
 80013d4:	0800152c 	.word	0x0800152c

080013d8 <memset>:
 80013d8:	4603      	mov	r3, r0
 80013da:	4402      	add	r2, r0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d100      	bne.n	80013e2 <memset+0xa>
 80013e0:	4770      	bx	lr
 80013e2:	f803 1b01 	strb.w	r1, [r3], #1
 80013e6:	e7f9      	b.n	80013dc <memset+0x4>

080013e8 <_init>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr

080013f4 <_fini>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr
